#Powershell script to generate an Azure Application Gateway v2 with Http Header rewriting to force no-caching for an entire site

#Connect to Azure account
Connect-AzAccount
Select-AzSubscription -Subscription "<sub name>"

$location = "SoutheastAsia"
$rg = "AppGW-rg2"

#Create a new Resource Group
New-AzResourceGroup -Name $rg -Location $location

#Generate self-signed certificate
New-SelfSignedCertificate -certstorelocation cert:\localmachine\my -dnsname www.contoso.com

$pwd = ConvertTo-SecureString -String "Azure123456!" -Force -AsPlainText

#Get the thumbnail signature and paste it in the line below
Export-PfxCertificate -cert cert:\localMachine\my\<signature>  -FilePath c:\appgwcert.pfx -Password $pwd

#Create VNet with two subnets
$sub1 = New-AzVirtualNetworkSubnetConfig -Name "AppGwSubnet" -AddressPrefix "10.0.0.0/24"
$sub2 = New-AzVirtualNetworkSubnetConfig -Name "BackendSubnet" -AddressPrefix "10.0.1.0/24"
$vnet = New-AzvirtualNetwork -Name "AutoscaleVNet" -ResourceGroupName $rg `
       -Location $location -AddressPrefix "10.0.0.0/16" -Subnet $sub1, $sub2


#Create static public IP
$pip = New-AzPublicIpAddress -ResourceGroupName $rg -name "AppGwVIP" `
       -location $location -AllocationMethod Static -Sku Standard

#Get all the neccessary parameters
$resourceGroup = Get-AzResourceGroup -Name $rg
$publicip = Get-AzPublicIpAddress -ResourceGroupName $rg -name "AppGwVIP"
$vnet = Get-AzvirtualNetwork -Name "AutoscaleVNet" -ResourceGroupName $rg
$gwSubnet = Get-AzVirtualNetworkSubnetConfig -Name "AppGwSubnet" -VirtualNetwork $vnet

$ipconfig = New-AzApplicationGatewayIPConfiguration -Name "IPConfig" -Subnet $gwSubnet
$fip = New-AzApplicationGatewayFrontendIPConfig -Name "FrontendIPCOnfig" -PublicIPAddress $publicip
$pool = New-AzApplicationGatewayBackendAddressPool -Name "Pool1" `
       -BackendIPAddresses testbackend1.westus.cloudapp.azure.com, testbackend2.westus.cloudapp.azure.com
$fp01 = New-AzApplicationGatewayFrontendPort -Name "SSLPort" -Port 443
$fp02 = New-AzApplicationGatewayFrontendPort -Name "HTTPPort" -Port 80

#setup the ssl certificate
$securepfxpwd = ConvertTo-SecureString -String "Azure123456!" -AsPlainText -Force
$sslCert01 = New-AzApplicationGatewaySslCertificate -Name "SSLCert" -Password $securepfxpwd `
            -CertificateFile "c:\appgwcert.pfx"
            
#setup http and https listener            
$listener01 = New-AzApplicationGatewayHttpListener -Name "SSLListener" `
             -Protocol Https -FrontendIPConfiguration $fip -FrontendPort $fp01 -SslCertificate $sslCert01
$listener02 = New-AzApplicationGatewayHttpListener -Name "HTTPListener" `
             -Protocol Http -FrontendIPConfiguration $fip -FrontendPort $fp02

$setting = New-AzApplicationGatewayBackendHttpSettings -Name "BackendHttpSetting1" `
          -Port 80 -Protocol Http -CookieBasedAffinity Disabled

#setup autoscaling configuration
$autoscaleConfig = New-AzApplicationGatewayAutoscaleConfiguration -MinCapacity 2
$sku = New-AzApplicationGatewaySku -Name Standard_v2 -Tier Standard_v2

#setup http response caching headers to not cache
$requestHeaderConfiguration = New-AzApplicationGatewayRewriteRuleHeaderConfiguration -HeaderName "X-isThroughProxy" -HeaderValue "True"
$responseHeaderConfiguration = New-AzApplicationGatewayRewriteRuleHeaderConfiguration -HeaderName "Strict-Transport-Security" -HeaderValue "max-age=10"
$responseHeaderConfiguration2 = New-AzApplicationGatewayRewriteRuleHeaderConfiguration -HeaderName "Cache-Control" -HeaderValue "no-cache, no-store, must-revalidate"
$responseHeaderConfiguration3 = New-AzApplicationGatewayRewriteRuleHeaderConfiguration -HeaderName "Pragma" -HeaderValue "no-cache"
$responseHeaderConfiguration4 = New-AzApplicationGatewayRewriteRuleHeaderConfiguration -HeaderName "Expires" -HeaderValue "-1"

#link all the headers into a single list
$myResponseHeaderarray = New-Object 'System.Collections.Generic.List[Microsoft.Azure.Commands.Network.Models.PSApplicationGatewayHeaderConfiguration]'
$myResponseHeaderarray.Add($responseHeaderConfiguration)
$myResponseHeaderarray.Add($responseHeaderConfiguration2)
$myResponseHeaderarray.Add($responseHeaderConfiguration3)
$myResponseHeaderarray.Add($responseHeaderConfiguration4)

$actionSet = New-AzApplicationGatewayRewriteRuleActionSet -ResponseHeaderConfiguration $myResponseHeaderarray  

$rewriteRule = New-AzApplicationGatewayRewriteRule -Name rewriteRule1 -ActionSet $actionSet    

$rewriteRuleSet = New-AzApplicationGatewayRewriteRuleSet -Name rewriteRuleSet1 -RewriteRule $rewriteRule

#setup the ARR rules
$rule01 = New-AzApplicationGatewayRequestRoutingRule -Name "Rule1WithRR" -RuleType basic `
         -BackendHttpSettings $setting -HttpListener $listener01 -BackendAddressPool $pool -RewriteRuleSet $rewriteRuleSet

$rule02 = New-AzApplicationGatewayRequestRoutingRule -Name "Rule2WithRR" -RuleType basic `
         -BackendHttpSettings $setting -HttpListener $listener02 -BackendAddressPool $pool -RewriteRuleSet $rewriteRuleSet

#create the actual application gateway
$appgw = New-AzApplicationGateway -Name "AutoscalingAppGw" -Zone 1,2,3 `
  -ResourceGroupName $rg -Location $location -BackendAddressPools $pool `
  -BackendHttpSettingsCollection $setting -GatewayIpConfigurations $ipconfig `
  -FrontendIpConfigurations $fip -FrontendPorts $fp01, $fp02 `
  -HttpListeners $listener01, $listener02 -RequestRoutingRules $rule01, $rule02 `
  -Sku $sku -sslCertificates $sslCert01 -AutoscaleConfiguration $autoscaleConfig -RewriteRuleSet $rewriteRuleSet
